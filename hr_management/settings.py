
"""
Django settings for hr_management project.

Generated by 'django-admin startproject' using Django 4.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-%!5&kk2=!aj_9z5()zc)@!t=h@i27zl7i9*t=)c07ld6ibh(%w'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*','103.73.191.201']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'hr_management_app',
    'django_crontab',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'hr_management_app.middleware.UserActionLoggerMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'hr_management.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'hr_management.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME':'hrms_final1',
        'USER':'root',
        'PASSWORD':'root',
        'HOST':'localhost',
        'PORT':'3306',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Kolkata'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

# STATIC_URL = '/static/'
AUTH_USER_MODEL="hr_management_app.CustomUser"
AUTHENTICATION_BACKENDS=['hr_management_app.EmailBackEnd.EmailBackEnd']

EMAIL_BACKEND="django.core.mail.backends.filebased.EmailBackend"
EMAIL_FILE_PATH=os.path.join(BASE_DIR,"sent_mails")



MEDIA_URL="/media/"
MEDIA_ROOT=os.path.join(BASE_DIR,"media")

STATIC_URL="/static/"
STATIC_ROOT=os.path.join(BASE_DIR,"static")



EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = ''
EMAIL_FROM_NAME = 'HRMS'
EMAIL_HOST_PASSWORD = ''



# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'







# import logging

# # Set up the logger for the file
# logger = logging.getLogger(__name__)
# logger.setLevel(logging.DEBUG)

# # Create a file handler
# log_path = 'hrms.log'  # set the log file path here
# handler = logging.FileHandler(log_path)
# handler.setLevel(logging.DEBUG)

# # Create a formatter for the file
# formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(pathname)s:%(lineno)d - %(message)s')
# handler.setFormatter(formatter)

# # Add the file handler to the logger
# logger.addHandler(handler)

# # Set up the logger for the console
# console_handler = logging.StreamHandler()
# console_handler.setLevel(logging.INFO)  # Set the log level for console logs

# # Create a formatter for the console
# console_formatter = logging.Formatter('%(levelname)s - %(message)s')
# console_handler.setFormatter(console_formatter)

# # Add the console handler to the logger
# logger.addHandler(console_handler)

# # User action that triggers the log messages
# def user_action():
#     # ... Your user action code goes here ...
#     # Log messages based on the user action
#     logger.debug("User performed the action.")
#     logger.info("User action was successful.")
#     logger.warning("User action had some issues.")
#     logger.error("User action encountered an error.")
#     logger.critical("Critical error in user action!")

# # Perform the user action
# user_action()


CRONJOBS = [
    ('10 * * * *', 'hr_management_app.AdminViews.send_leave_email'),
    ('10 * * * *', 'hr_management_app.AdminViews.send_reimbursement_email'),
    ('10 * * * *', 'hr_management_app.AdminViews.send_reimbursement_email_account'),
]


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'INFO',  # Log messages at INFO level or higher
            'class': 'logging.FileHandler',
            'filename': 'hrms.log',  # Specify the log file name and path
        },
    },
    'root': {
        'handlers': ['file'],
        'level': 'INFO',  # Log messages at INFO level or higher
    },
    'loggers': {
        'django': {
            'handlers': ['file'],
            'level': 'INFO',  # Log Django-related messages at INFO level or higher
            'propagate': False,  # Prevent log messages from propagating to the root logger
        },
        'hr_management_app': {  # Replace 'your_app_name' with the name of your Django app
            'handlers': ['file'],
            'level': 'INFO',  # Log app-specific messages at INFO level or higher
            'propagate': False,  # Prevent log messages from propagating to the root logger
        },
    },
    'formatters': {
        'detailed': {
            'format': '%(asctime)s [%(levelname)s] %(remote_addr)s - %(message)s'
        },
    },
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
    },
}






# SESSION_COOKIE_HTTPONLY = True

# CSRF_COOKIE_HTTPONLY = True

# # SESSION_COOKIE_SECURE = True

# CSRF_COOKIE_SECURE = True

# SECURE_CONTENT_TYPE_NOSNIFF = True

SECURE_BROWSER_XSS_FILTER = True

SESSION_COOKIE_AGE = 9000 # in seconds

# CSRF_COOKIE_AGE = 300 # in seconds

SESSION_EXPIRE_AT_BROWSER_CLOSE = True

APPEND_SLASH = False

# SECURE_HSTS_SECONDS = 6000  # in seconds

# SECURE_HSTS_INCLUDE_SUBDOMAINS = True 

# X_FRAME_OPTIONS = 'DENY'

# REFERRER_POLICY = 'same-origin'



# SESSION_SAVE_EVERY_REQUEST = True # "False" by default